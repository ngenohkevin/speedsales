// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: products.sql

package db

import (
	"context"
)

const createProducts = `-- name: CreateProducts :one
INSERT INTO products (
    name, description, category, department_id, supplier_id, cost, selling_price, wholesale_price, min_margin, quantity
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING product_id, name, description, category, department_id, supplier_id, cost, selling_price, wholesale_price, min_margin, quantity, created_at
`

type CreateProductsParams struct {
	Name           string  `json:"name"`
	Description    string  `json:"description"`
	Category       string  `json:"category"`
	DepartmentID   int64   `json:"department_id"`
	SupplierID     int64   `json:"supplier_id"`
	Cost           int64   `json:"cost"`
	SellingPrice   int64   `json:"selling_price"`
	WholesalePrice int64   `json:"wholesale_price"`
	MinMargin      float64 `json:"min_margin"`
	Quantity       int64   `json:"quantity"`
}

func (q *Queries) CreateProducts(ctx context.Context, arg CreateProductsParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProducts,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.DepartmentID,
		arg.SupplierID,
		arg.Cost,
		arg.SellingPrice,
		arg.WholesalePrice,
		arg.MinMargin,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.DepartmentID,
		&i.SupplierID,
		&i.Cost,
		&i.SellingPrice,
		&i.WholesalePrice,
		&i.MinMargin,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProducts = `-- name: DeleteProducts :exec
DELETE FROM products
WHERE product_id = $1
`

func (q *Queries) DeleteProducts(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProducts, productID)
	return err
}

const getProducts = `-- name: GetProducts :one
SELECT product_id, name, description, category, department_id, supplier_id, cost, selling_price, wholesale_price, min_margin, quantity, created_at FROM products
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetProducts(ctx context.Context, productID int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProducts, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.DepartmentID,
		&i.SupplierID,
		&i.Cost,
		&i.SellingPrice,
		&i.WholesalePrice,
		&i.MinMargin,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT product_id, name, description, category, department_id, supplier_id, cost, selling_price, wholesale_price, min_margin, quantity, created_at FROM products
WHERE product_id = $1
ORDER BY name
LIMIT $2
OFFSET $3
`

type ListProductsParams struct {
	ProductID int64 `json:"product_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.ProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.DepartmentID,
			&i.SupplierID,
			&i.Cost,
			&i.SellingPrice,
			&i.WholesalePrice,
			&i.MinMargin,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProducts = `-- name: UpdateProducts :one
UPDATE products
SET name = $2,
    description = $3,
    category = $4,
    cost = $5,
    selling_price = $6,
    wholesale_price = $7,
    min_margin = $8,
    quantity = $9
WHERE product_id = $1
RETURNING product_id, name, description, category, department_id, supplier_id, cost, selling_price, wholesale_price, min_margin, quantity, created_at
`

type UpdateProductsParams struct {
	ProductID      int64   `json:"product_id"`
	Name           string  `json:"name"`
	Description    string  `json:"description"`
	Category       string  `json:"category"`
	Cost           int64   `json:"cost"`
	SellingPrice   int64   `json:"selling_price"`
	WholesalePrice int64   `json:"wholesale_price"`
	MinMargin      float64 `json:"min_margin"`
	Quantity       int64   `json:"quantity"`
}

func (q *Queries) UpdateProducts(ctx context.Context, arg UpdateProductsParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProducts,
		arg.ProductID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Cost,
		arg.SellingPrice,
		arg.WholesalePrice,
		arg.MinMargin,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.DepartmentID,
		&i.SupplierID,
		&i.Cost,
		&i.SellingPrice,
		&i.WholesalePrice,
		&i.MinMargin,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}
