// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: department.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO department (category, sub_category, description)
VALUES (
 $1, $2, $3
) RETURNING department_id, category, sub_category, description
`

type CreateDepartmentParams struct {
	Category    pgtype.Text `json:"category"`
	SubCategory pgtype.Text `json:"sub_category"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment, arg.Category, arg.SubCategory, arg.Description)
	var i Department
	err := row.Scan(
		&i.DepartmentID,
		&i.Category,
		&i.SubCategory,
		&i.Description,
	)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM department
WHERE department_id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, departmentID int64) error {
	_, err := q.db.Exec(ctx, deleteDepartment, departmentID)
	return err
}

const getDepartment = `-- name: GetDepartment :one
SELECT department_id, category, sub_category, description FROM department
WHERE department_id = $1 LIMIT 1
`

func (q *Queries) GetDepartment(ctx context.Context, departmentID int64) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartment, departmentID)
	var i Department
	err := row.Scan(
		&i.DepartmentID,
		&i.Category,
		&i.SubCategory,
		&i.Description,
	)
	return i, err
}

const listDepartment = `-- name: ListDepartment :many
SELECT department_id, category, sub_category, description FROM department
WHERE department_id = $1
ORDER BY category
LIMIT $2
OFFSET $3
`

type ListDepartmentParams struct {
	DepartmentID int64 `json:"department_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListDepartment(ctx context.Context, arg ListDepartmentParams) ([]Department, error) {
	rows, err := q.db.Query(ctx, listDepartment, arg.DepartmentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.DepartmentID,
			&i.Category,
			&i.SubCategory,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepartment = `-- name: UpdateDepartment :one
UPDATE department
SET category = $2,
    sub_category = $3,
    description = $4
WHERE department_id = $1
RETURNING department_id, category, sub_category, description
`

type UpdateDepartmentParams struct {
	DepartmentID int64       `json:"department_id"`
	Category     pgtype.Text `json:"category"`
	SubCategory  pgtype.Text `json:"sub_category"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, updateDepartment,
		arg.DepartmentID,
		arg.Category,
		arg.SubCategory,
		arg.Description,
	)
	var i Department
	err := row.Scan(
		&i.DepartmentID,
		&i.Category,
		&i.SubCategory,
		&i.Description,
	)
	return i, err
}
