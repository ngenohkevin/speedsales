// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: suppliers.sql

package db

import (
	"context"
	"database/sql"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers (
                       name,
                       address,
                       contact_number
) VALUES (
          $1, $2, $3
) RETURNING supplier_id, name, address, contact_number, email
`

type CreateSupplierParams struct {
	Name          sql.NullString `json:"name"`
	Address       sql.NullString `json:"address"`
	ContactNumber sql.NullString `json:"contact_number"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, createSupplier, arg.Name, arg.Address, arg.ContactNumber)
	var i Supplier
	err := row.Scan(
		&i.SupplierID,
		&i.Name,
		&i.Address,
		&i.ContactNumber,
		&i.Email,
	)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM suppliers
WHERE supplier_id = $1
`

func (q *Queries) DeleteSupplier(ctx context.Context, supplierID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, supplierID)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT supplier_id, name, address, contact_number, email FROM suppliers
WHERE supplier_id = $1 LIMIT 1
`

func (q *Queries) GetSupplier(ctx context.Context, supplierID int32) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, getSupplier, supplierID)
	var i Supplier
	err := row.Scan(
		&i.SupplierID,
		&i.Name,
		&i.Address,
		&i.ContactNumber,
		&i.Email,
	)
	return i, err
}

const listSupplier = `-- name: ListSupplier :many
SELECT supplier_id, name, address, contact_number, email FROM suppliers
ORDER BY supplier_id
LIMIT $1
OFFSET $2
`

type ListSupplierParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSupplier(ctx context.Context, arg ListSupplierParams) ([]Supplier, error) {
	rows, err := q.db.QueryContext(ctx, listSupplier, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.Name,
			&i.Address,
			&i.ContactNumber,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE suppliers
SET  name = $2,
     address = $3,
     contact_number = $4,
     email = $5
WHERE supplier_id = $1
RETURNING supplier_id, name, address, contact_number, email
`

type UpdateSupplierParams struct {
	SupplierID    int32          `json:"supplier_id"`
	Name          sql.NullString `json:"name"`
	Address       sql.NullString `json:"address"`
	ContactNumber sql.NullString `json:"contact_number"`
	Email         sql.NullString `json:"email"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, updateSupplier,
		arg.SupplierID,
		arg.Name,
		arg.Address,
		arg.ContactNumber,
		arg.Email,
	)
	var i Supplier
	err := row.Scan(
		&i.SupplierID,
		&i.Name,
		&i.Address,
		&i.ContactNumber,
		&i.Email,
	)
	return i, err
}
