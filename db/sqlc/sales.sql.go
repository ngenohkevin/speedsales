// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: sales.sql

package db

import (
	"context"
	"database/sql"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (
   product_id, customer_id, quantity, sale_date, total_price

) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING sale_id, product_id, customer_id, quantity, sale_date, total_price
`

type CreateSaleParams struct {
	ProductID  sql.NullInt32  `json:"product_id"`
	CustomerID sql.NullInt32  `json:"customer_id"`
	Quantity   sql.NullInt32  `json:"quantity"`
	SaleDate   sql.NullTime   `json:"sale_date"`
	TotalPrice sql.NullString `json:"total_price"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.ProductID,
		arg.CustomerID,
		arg.Quantity,
		arg.SaleDate,
		arg.TotalPrice,
	)
	var i Sale
	err := row.Scan(
		&i.SaleID,
		&i.ProductID,
		&i.CustomerID,
		&i.Quantity,
		&i.SaleDate,
		&i.TotalPrice,
	)
	return i, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sales
WHERE sale_id = $1
`

func (q *Queries) DeleteSale(ctx context.Context, saleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSale, saleID)
	return err
}

const getSale = `-- name: GetSale :one
SELECT sale_id, product_id, customer_id, quantity, sale_date, total_price FROM sales
WHERE sale_id = $1 LIMIT 1
`

func (q *Queries) GetSale(ctx context.Context, saleID int32) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSale, saleID)
	var i Sale
	err := row.Scan(
		&i.SaleID,
		&i.ProductID,
		&i.CustomerID,
		&i.Quantity,
		&i.SaleDate,
		&i.TotalPrice,
	)
	return i, err
}

const listSale = `-- name: ListSale :many
SELECT sale_id, product_id, customer_id, quantity, sale_date, total_price FROM sales
ORDER BY sale_id
LIMIT $1
    OFFSET $2
`

type ListSaleParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSale(ctx context.Context, arg ListSaleParams) ([]Sale, error) {
	rows, err := q.db.QueryContext(ctx, listSale, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sale{}
	for rows.Next() {
		var i Sale
		if err := rows.Scan(
			&i.SaleID,
			&i.ProductID,
			&i.CustomerID,
			&i.Quantity,
			&i.SaleDate,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSale = `-- name: UpdateSale :one
UPDATE sales
SET  quantity = $2,
     sale_date = $3,
     total_price = $4
WHERE sale_id = $1
RETURNING sale_id, product_id, customer_id, quantity, sale_date, total_price
`

type UpdateSaleParams struct {
	SaleID     int32          `json:"sale_id"`
	Quantity   sql.NullInt32  `json:"quantity"`
	SaleDate   sql.NullTime   `json:"sale_date"`
	TotalPrice sql.NullString `json:"total_price"`
}

func (q *Queries) UpdateSale(ctx context.Context, arg UpdateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, updateSale,
		arg.SaleID,
		arg.Quantity,
		arg.SaleDate,
		arg.TotalPrice,
	)
	var i Sale
	err := row.Scan(
		&i.SaleID,
		&i.ProductID,
		&i.CustomerID,
		&i.Quantity,
		&i.SaleDate,
		&i.TotalPrice,
	)
	return i, err
}
